trigger:
  branches:
    include:
    - main
    - develop
    - fix/*
    - feature/*
  tags:
    include:
    - '*'

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
  NUKE_TELEMETRY_OPTOUT: '1'
  IsMainBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  IsPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  IsTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags')]
  disable.coverage.autogenerate: 'true'

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    strategy:
      matrix:
        'Windows':
          VM_IMAGE: 'windows-latest'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - pwsh: |
        Write-Host 'IsMainBranch  $(IsMainBranch)'
        Write-Host 'IsPullRequest $(IsPullRequest)'
        Write-Host 'IsTag Branch  $(IsTag)'
    - pwsh: |
        dotnet tool install --global GitVersion.Tool
        dotnet-gitversion
    - pwsh: ./build.ps1 CreateNuGetPackages
      displayName: '[Nuke Build]'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)/.tests/results/*.xml'

    #- task: reportgenerator@4
    #  displayName: 'Merge code coverage reports'
    #  inputs:
    #    reports: '$(Build.SourcesDirectory)/.tests/coverage/**/*.xml'
    #    targetdir: '$(Pipeline.Workspace)/coverlet'
    #    reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura'
    #    verbosity: 'Verbose'

    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        reportDirectory: '$(Build.SourcesDirectory)/.tests/coverage/report'
        summaryFileLocation: '$(Build.SourcesDirectory)/.tests/coverage/report/Cobertura.xml'

    #- task: PublishBuildArtifacts@1
    #  inputs:
    #    pathToPublish: '$(Build.SourcesDirectory)/.tests/coverage/report'
    #    artifactName: 'CodeCoverage' 
    #    #publishLocation: 'Container' # Options: container, filePath
    #    #targetPath: # Required when publishLocation == FilePath
    #    #parallel: false # Optional
    #    #parallelCount: # Optional
    #    #fileCopyOptions: #Optional

    - task: DotNetCoreCLI@2
      displayName: "Publish testing NuGet packages"
      condition: and(succeeded(), eq(variables.IsMainBranch, 'false'), eq(variables.IsPullRequest, 'false'), eq(variables.IsTag, 'false'))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/.artifacts/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'Core/testing'  
       
    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      condition: and(succeeded(), eq(variables.IsTag, 'true'))
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/.artifacts/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'CreativeCodersNuGet'
