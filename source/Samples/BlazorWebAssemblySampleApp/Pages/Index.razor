@page "/"
@using CreativeCoders.AspNetCore.Blazor.Components
@using BlazorWebAssemblySampleApp.ViewModels
@using System.Threading

<h1>Hello, world!</h1>

<div class="alert alert-warning" role="alert">
    Before authentication will function correctly, you must configure your provider details in <code>Program.cs</code>
</div>

<div>
    <div class="btn-group">
        <input type="text" />
        <div class="dropdown-menu"></div>
    </div>

    <Button class="btn-lg" Kind="@ButtonKind.Primary">TestButtonContent</Button>
    <Button Kind="@ButtonKind.Primary">TestButtonContent</Button>
    <Button Kind="@ButtonKind.Primary" href="counter">TestButtonContent</Button>

    <Button Kind="@ButtonKind.Success">TestButtonContent</Button>
    <Button Kind="@ButtonKind.Success">TestButtonContent</Button>
    <Button Kind="@ButtonKind.Success" Clicked="() => ButtonClicked()">TestButtonContent</Button>

    <Button IsOutlined="@IsOutlined">TestButtonContent</Button>
    <Button IsOutlined="@IsOutlined">TestButtonContent</Button>
    <Button IsOutlined="@IsOutlined">TestButtonContent</Button>

    <Button IsOutlined="@IsOutlined" Clicked="@ButtonClicked">TestButtonContent</Button>
</div>

<div>
    <LinkButton href="counter">Goto Counter</LinkButton>
</div>

Welcome to your new app.

<div style="content: url('https://api.iconify.design/ic:baseline-add-circle.svg?width=64px&height=64px');vertical-align: -0.125em;"></div>

<ItemsControl TItem="TestViewModel" ItemsSource="@ListItems">
    <ItemTemplate Context="item">
        <div>@(item.IntValue): @(item.Text)</div>
    </ItemTemplate>
</ItemsControl>

@code
{
    private Timer _timer;

    public BlazorObservableCollection<TestViewModel> ListItems { get; set; }
        = new BlazorObservableCollection<TestViewModel>
        {
            new TestViewModel{IntValue = 1, Text = "Hello"},
            new TestViewModel { IntValue = 2, Text = "World"},
            new TestViewModel{IntValue = 3, Text = "12345"}
        };

    public bool IsOutlined;

    public void ButtonClicked()
    {
        if (_timer == null)
        {
            _timer = new Timer(state => ListItems.Add(new TestViewModel {IntValue = Environment.TickCount, Text = Environment.TickCount.ToString()}));
            _timer.Change(500, 1000);
        }
        IsOutlined = !IsOutlined;
    }
}
