using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Threading.Tasks;
using CreativeCoders.AspNetCore.TokenAuthApi.Abstractions;
using CreativeCoders.Core;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;

namespace CreativeCoders.AspNetCore.TokenAuthApi.Jwt;

/// <summary>
///     Provides an implementation of the <see cref="ITokenCreator" /> interface that creates JWT (Json Web Token) tokens.
/// </summary>
/// <remarks>
///     The <see cref="JwtTokenCreator" /> class can create JWT tokens based on issuer, username, and claims information.
///     This class is constructed with an instance of <see cref="IOptions&lt;JwtTokenAuthApiOptions&gt;" />, which provides
///     the necessary options for token creation, including the security key. The security key must be valid and not null
///     at the time of construction, otherwise an <see cref="InvalidOperationException" /> will be thrown.
///     The tokens generated by this class include signature using the HMAC SHA256 algorithm.
/// </remarks>
public class JwtTokenCreator : ITokenCreator
{
    private readonly JwtTokenAuthApiOptions _options;

    public JwtTokenCreator(IOptions<JwtTokenAuthApiOptions> options)
    {
        _options = Ensure.NotNull(options).Value;

        if (_options.SecurityKey == null)
        {
            throw new InvalidOperationException("Security key must not be null");
        }
    }

    public Task<string> CreateTokenAsync(string issuer, string userName, IEnumerable<Claim> claims)
    {
        Ensure.NotNull(userName);

        var credentials = new SigningCredentials(_options.SecurityKey, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer,
            "",
            claims,
            expires: DateTime.Now.Add(_options.ExpirationTimeSpan),
            signingCredentials: credentials);

        return Task.FromResult(new JwtSecurityTokenHandler().WriteToken(token));
    }

    public Task<AuthToken> ReadTokenFromStringAsync(string token)
    {
        var jwtToken = new JwtSecurityTokenHandler().ReadJwtToken(token);

        return Task.FromResult(new AuthToken { Claims = jwtToken.Claims });
    }
}
